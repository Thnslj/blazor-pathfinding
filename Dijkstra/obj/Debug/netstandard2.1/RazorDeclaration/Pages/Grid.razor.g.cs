#pragma checksum "C:\dev\Dijkstra\Dijkstra\Pages\Grid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "380e35c9b851d53d55e802b1a58ebebc5cbbeb23"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dijkstra.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using Dijkstra;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\dev\Dijkstra\Dijkstra\_Imports.razor"
using Dijkstra.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\dev\Dijkstra\Dijkstra\Pages\Grid.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
    public partial class Grid : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 21 "C:\dev\Dijkstra\Dijkstra\Pages\Grid.razor"
       
    [Parameter]
    public int Rows { get; set; }

    [Parameter]
    public int Cols { get; set; }


    private CellState[,] state;

    private List<CellState> unvisited = new List<CellState>();

    private CellState start;
    private CellState destination;
    private CellState current;

    private Timer timer;

    protected override void OnInitialized()
    {
        state = new CellState[Rows, Cols];

        timer = new Timer();
        timer.Interval = TimeSpan.FromMilliseconds(20).TotalMilliseconds;
        timer.Elapsed += async (sender, args) =>
        {
            await AlgorithmStep();
        };


        for (int x = 0; x < Rows; x++)
        {

            

#line default
#line hidden
#nullable disable
#nullable restore
#line 54 "C:\dev\Dijkstra\Dijkstra\Pages\Grid.razor"
             for (int y = 0; y < Cols; y++)
            {
                state[x, y] = new CellState(x, y);
                unvisited.Add(state[x, y]);
            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 58 "C:\dev\Dijkstra\Dijkstra\Pages\Grid.razor"
             
        }

        destination = state[25, 3];
        destination.End = true;

        current = state[3, 15];
        start = current;
        current.Start = true;
        current.TentativeDistance = 0;
    }


    void ToggleStart()
    {
        if (this.timer.Enabled)
        {
            this.timer.Stop();
        }
        else
        {
            this.timer.Start();
        }
    }

    async Task AlgorithmStep()
    {
        Dijkstra();
        //this.StateHasChanged();
    }

    void Dijkstra()
    {
        if (destination.Visited)
        {
            // solution found
            HighLightSolution();
            this.timer.Stop();
            return;
        }

        if (this.current == null)
        {
            // no solution found
            this.timer.Stop();
            return;
        }

        var neightbours = GetNeighbours(this.current).Where(x => !x.Visited).ToArray();

        int distanceWeight = 1;

        foreach (var cell in neightbours)
        {
            cell.TentativeDistance = Math.Min(cell.TentativeDistance, this.current.TentativeDistance + distanceWeight);
        }

        this.VisitNode(this.current);

        this.current = unvisited.OrderBy(x => x.TentativeDistance).First();
    }

    private void HighLightSolution()
    {
        var currentStopOnSolutionRoute = this.destination;

        var route = new List<CellState>();
        while (currentStopOnSolutionRoute != this.start)
        {
            var neighbour = this.GetNearestNeighbour(currentStopOnSolutionRoute);
            route.Add(neighbour);
            currentStopOnSolutionRoute = neighbour;
        }

        route.Reverse();

        var timer = new Timer();
        timer.Interval = TimeSpan.FromMilliseconds(10).TotalMilliseconds;

        int highlightCounter = 0;
        timer.Elapsed += (sender, args) =>
        {
            highlightCounter++;

            if (highlightCounter > route.Count)
            {
                timer.Stop();
                return;
            }

            route[highlightCounter].Route = true;
            this.StateHasChanged();
        };
        timer.Start();
    }

    private CellState GetNearestNeighbour(CellState cellState)
    {
        return GetNeighbours(cellState).OrderBy(x => x.TentativeDistance).First();
    }

    private void VisitNode(CellState cellState)
    {
        cellState.Visited = true;
        unvisited.Remove(cellState);
    }

    private CellState[] GetNeighbours(CellState cellState)
    {
        var neightbours = new List<CellState>();

        if (cellState.Y > 0)
        {
            // add northern neighbour
            neightbours.Add(this.state[cellState.X, cellState.Y - 1]);
        }
        if (cellState.X + 1 < this.Rows)
        {
            // add eastern neighbour
            neightbours.Add(this.state[cellState.X + 1, cellState.Y]);
        }
        if (cellState.Y + 1 < this.Cols)
        {
            // add southern neighbour
            neightbours.Add(this.state[cellState.X, cellState.Y + 1]);
        }
        if (cellState.X > 0)
        {
            // add western neighbour
            neightbours.Add(this.state[cellState.X - 1, cellState.Y]);
        }

        return neightbours.ToArray();
    }

    void Reset()
    {
        this.OnInitialized();
        this.StateHasChanged();
    }

    void ClickHandler(CellState cellState)
    {
        this.VisitNode(cellState);
        cellState.Blocked = true;

        this.StateHasChanged();
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
